/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type IsValidError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.InvalidInputJSON;
}>;

export type IsValidVariables = {
  body: Schemas.IsValidBody;
} & ApiContext["fetcherOptions"];

export const fetchIsValid = (
  variables: IsValidVariables,
  signal?: AbortSignal,
) =>
  apiFetch<boolean, IsValidError, Schemas.IsValidBody, {}, {}, {}>({
    url: "/creditCard/isValid",
    method: "post",
    ...variables,
    signal,
  });

export const useIsValid = (
  options?: Omit<
    reactQuery.UseMutationOptions<boolean, IsValidError, IsValidVariables>,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<boolean, IsValidError, IsValidVariables>({
    mutationFn: (variables: IsValidVariables) =>
      fetchIsValid({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation = {
  path: string;
  operationId: never;
  variables: unknown;
};
